{"ast":null,"code":"import _slicedToArray from \"D:\\\\Javascript calculator\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Javascript calculator\\\\src\\\\components\\\\App.jsx\";\nimport React, { useState } from \"react\";\nimport Header from \"./Header\";\n\nfunction App() {\n  const numbers = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"];\n  const arithmeticOperations = [\"/\", \"*\", \"-\", \"=\", \"+\", \".\", \"AC\"];\n\n  const _useState = useState(\"0\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentCalculation = _useState2[0],\n        setCurrentCalculation = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        operator = _useState4[0],\n        setOperator = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dotOperator = _useState6[0],\n        setDotOperator = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        nullOperator = _useState8[0],\n        setNullOperator = _useState8[1];\n\n  const handleClick = event => {\n    const innerText = event.target.innerText;\n\n    switch (innerText) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        // to check the current status of the calculation: \n        // if currentcalculation is 0, it should change it to pressed number\n        // if nullOperator has been pressed, the pressed number should not be added to the currentcalculation\n        // Otherwise the pressed number should be added to the currentcalculation\n        if (currentCalculation === \"0\") {\n          setCurrentCalculation(innerText);\n        } else if (nullOperator) {\n          setCurrentCalculation(currentCalculation);\n        } else {\n          setCurrentCalculation(currentCalculation + innerText);\n        }\n\n        setOperator(false);\n        setDotOperator(false);\n        break;\n\n      case \"0\":\n        // nullOperator:\n        // if currentCalculation is 0, the currentCalculation should be changed to the pressed number\n        // otherwise to check if nullOperator is set to false and operator has been pressed, add 0 to the end of the calculation\n        // set nullOperator to true so that it can not be added twice\n        if (currentCalculation === \"0\") {\n          setCurrentCalculation(innerText);\n        } else if (!nullOperator && operator) {\n          setCurrentCalculation(currentCalculation + innerText);\n          setNullOperator(true);\n        } else if (nullOperator) {\n          setCurrentCalculation(currentCalculation);\n          setOperator(true);\n        } else {\n          setCurrentCalculation(currentCalculation + innerText);\n        }\n\n        setDotOperator(false);\n        break;\n\n      case \"AC\":\n        // set variables to the initial state\n        setCurrentCalculation(\"0\");\n        setOperator(false);\n        setDotOperator(false);\n        setNullOperator(false);\n        break;\n\n      case \".\":\n        // setting up the currentCalculation so that two dots can not be in a row. \n        if (!dotOperator) {\n          setCurrentCalculation(currentCalculation + innerText);\n          setDotOperator(true);\n        }\n\n        setOperator(true);\n        setNullOperator(false);\n        break;\n\n      case '/':\n      case '+':\n      case '-':\n      case '*':\n        // setting up the currentCalculation so that two operators can not be in a row. \n        if (!operator) {\n          setCurrentCalculation(currentCalculation + innerText);\n          setOperator(true);\n        }\n\n        setDotOperator(true);\n        setNullOperator(false);\n        break;\n\n      case \"=\":\n        // if the last pressed button is either operator or dot, it will be ignored in evaluation. \n        setCurrentCalculation(eval(currentCalculation.match(/[+/*]?-?\\d+\\.?\\d*/g).join('')));\n        setDotOperator(false);\n        setOperator(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calculator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"display\",\n    className: \"display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, currentCalculation), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"number-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, numbers.map((number, index) => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"\".concat(number === \"0\" && \"null\"),\n      onClick: handleClick,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, number);\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"operator-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, arithmeticOperations.map((operator, index) => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"\".concat(operator === \"=\" && \"eval\", \" \\n                   \").concat(operator === \".\" && \"dot\", \"\\n                   \").concat(operator === \"+\" && \"addition\", \"\\n                   \").concat(operator === \"AC\" && \"ac\", \"\\n                   \").concat(operator === \"/\" && \"divide\", \"\\n                   \").concat(operator === \"*\" && \"multiply\", \"\\n                   \").concat(operator === \"-\" && \"substraction\", \"\\n                   \"),\n      onClick: handleClick,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, operator);\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Javascript calculator/src/components/App.jsx"],"names":["React","useState","Header","App","numbers","arithmeticOperations","currentCalculation","setCurrentCalculation","operator","setOperator","dotOperator","setDotOperator","nullOperator","setNullOperator","handleClick","event","innerText","target","eval","match","join","map","number","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,SAASC,GAAT,GAAe;AAEb,QAAMC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CAAhB;AACA,QAAMC,oBAAoB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,IAA/B,CAA7B;;AAHa,oBAKuCJ,QAAQ,CAAC,GAAD,CAL/C;AAAA;AAAA,QAKNK,kBALM;AAAA,QAKcC,qBALd;;AAAA,qBAMmBN,QAAQ,CAAC,KAAD,CAN3B;AAAA;AAAA,QAMNO,QANM;AAAA,QAMIC,WANJ;;AAAA,qBAOyBR,QAAQ,CAAC,KAAD,CAPjC;AAAA;AAAA,QAONS,WAPM;AAAA,QAOOC,cAPP;;AAAA,qBAQ2BV,QAAQ,CAAC,KAAD,CARnC;AAAA;AAAA,QAQNW,YARM;AAAA,QAQQC,eARR;;AAUb,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA,UACrBC,SADqB,GACPD,KAAK,CAACE,MADC,CACrBD,SADqB;;AAG7B,YAAQA,SAAR;AACE,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACE;AACA;AACA;AACA;AACA,YAAIV,kBAAkB,KAAK,GAA3B,EAAgC;AAC9BC,UAAAA,qBAAqB,CAACS,SAAD,CAArB;AACD,SAFD,MAEO,IAAIJ,YAAJ,EAAkB;AACvBL,UAAAA,qBAAqB,CAACD,kBAAD,CAArB;AACD,SAFM,MAEA;AACLC,UAAAA,qBAAqB,CAACD,kBAAkB,GAAGU,SAAtB,CAArB;AACD;;AACDP,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,QAAAA,cAAc,CAAC,KAAD,CAAd;AACA;;AAEF,WAAK,GAAL;AACE;AACA;AACA;AACA;AACA,YAAIL,kBAAkB,KAAK,GAA3B,EAAgC;AAC9BC,UAAAA,qBAAqB,CAACS,SAAD,CAArB;AACD,SAFD,MAEO,IAAI,CAACJ,YAAD,IAAiBJ,QAArB,EAA+B;AACpCD,UAAAA,qBAAqB,CAACD,kBAAkB,GAAGU,SAAtB,CAArB;AACAH,UAAAA,eAAe,CAAC,IAAD,CAAf;AAED,SAJM,MAIA,IAAID,YAAJ,EAAkB;AACvBL,UAAAA,qBAAqB,CAACD,kBAAD,CAArB;AACAG,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD,SAHM,MAGA;AACLF,UAAAA,qBAAqB,CAACD,kBAAkB,GAAGU,SAAtB,CAArB;AACD;;AACDL,QAAAA,cAAc,CAAC,KAAD,CAAd;AACA;;AAEF,WAAK,IAAL;AACE;AACAJ,QAAAA,qBAAqB,CAAC,GAAD,CAArB;AACAE,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,QAAAA,cAAc,CAAC,KAAD,CAAd;AACAE,QAAAA,eAAe,CAAC,KAAD,CAAf;AACA;;AAEF,WAAK,GAAL;AACE;AACA,YAAI,CAACH,WAAL,EAAkB;AAChBH,UAAAA,qBAAqB,CAACD,kBAAkB,GAAGU,SAAtB,CAArB;AACAL,UAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AACDF,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,QAAAA,eAAe,CAAC,KAAD,CAAf;AACA;;AAEF,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACE;AACA,YAAI,CAACL,QAAL,EAAe;AACbD,UAAAA,qBAAqB,CAACD,kBAAkB,GAAGU,SAAtB,CAArB;AACAP,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AACDE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,QAAAA,eAAe,CAAC,KAAD,CAAf;AACA;;AAEF,WAAK,GAAL;AACE;AACAN,QAAAA,qBAAqB,CAACW,IAAI,CAACZ,kBAAkB,CAACa,KAAnB,CAAyB,oBAAzB,EAA+CC,IAA/C,CAAoD,EAApD,CAAD,CAAL,CAArB;AACAT,QAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,QAAAA,WAAW,CAAC,KAAD,CAAX;AAhFJ;AAmFD,GAtFD;;AAwFA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAkB,IAAA,SAAS,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCH,kBAAvC,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACiB,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,wBACE;AACE,MAAA,SAAS,YAEJD,MAAM,KAAK,GAAX,IAAkB,MAFd,CADX;AAKE,MAAA,OAAO,EAAER,WALX;AAKwB,MAAA,GAAG,EAAES,KAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKqCD,MALrC,CADF;AAQD,GATA,CADH,CAFF,eAeE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,oBAAoB,CAACgB,GAArB,CAAyB,CAACb,QAAD,EAAWe,KAAX,KAAqB;AAC7C,wBACE;AACE,MAAA,SAAS,YACJf,QAAQ,KAAK,GAAb,IAAoB,MADhB,mCAEJA,QAAQ,KAAK,GAAb,IAAoB,KAFhB,kCAGJA,QAAQ,KAAK,GAAb,IAAoB,UAHhB,kCAIJA,QAAQ,KAAK,IAAb,IAAqB,IAJjB,kCAKJA,QAAQ,KAAK,GAAb,IAAoB,QALhB,kCAMJA,QAAQ,KAAK,GAAb,IAAoB,UANhB,kCAOJA,QAAQ,KAAK,GAAb,IAAoB,cAPhB,0BADX;AAWE,MAAA,OAAO,EAAEM,WAXX;AAWwB,MAAA,GAAG,EAAES,KAX7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWqCf,QAXrC,CADF;AAcD,GAfA,CADH,CAfF,CAFF,CADF;AAuCD;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Header\";\n\n\nfunction App() {\n\n  const numbers = [\"7\", \"8\", \"9\", \"4\", \"5\", \"6\", \"1\", \"2\", \"3\", \"0\"];\n  const arithmeticOperations = [\"/\", \"*\", \"-\", \"=\", \"+\", \".\", \"AC\"];\n\n  const [currentCalculation, setCurrentCalculation] = useState(\"0\");\n  const [operator, setOperator] = useState(false);\n  const [dotOperator, setDotOperator] = useState(false);\n  const [nullOperator, setNullOperator] = useState(false);\n\n  const handleClick = (event) => {\n    const { innerText } = event.target;\n\n    switch (innerText) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        // to check the current status of the calculation: \n        // if currentcalculation is 0, it should change it to pressed number\n        // if nullOperator has been pressed, the pressed number should not be added to the currentcalculation\n        // Otherwise the pressed number should be added to the currentcalculation\n        if (currentCalculation === \"0\") {\n          setCurrentCalculation(innerText);\n        } else if (nullOperator) {\n          setCurrentCalculation(currentCalculation);\n        } else {\n          setCurrentCalculation(currentCalculation + innerText);\n        }\n        setOperator(false);\n        setDotOperator(false);\n        break;\n\n      case \"0\":\n        // nullOperator:\n        // if currentCalculation is 0, the currentCalculation should be changed to the pressed number\n        // otherwise to check if nullOperator is set to false and operator has been pressed, add 0 to the end of the calculation\n        // set nullOperator to true so that it can not be added twice\n        if (currentCalculation === \"0\") {\n          setCurrentCalculation(innerText);\n        } else if (!nullOperator && operator) {\n          setCurrentCalculation(currentCalculation + innerText);\n          setNullOperator(true);\n\n        } else if (nullOperator) {\n          setCurrentCalculation(currentCalculation);\n          setOperator(true);\n        } else {\n          setCurrentCalculation(currentCalculation + innerText);\n        }\n        setDotOperator(false);\n        break;\n\n      case \"AC\":\n        // set variables to the initial state\n        setCurrentCalculation(\"0\");\n        setOperator(false);\n        setDotOperator(false);\n        setNullOperator(false);\n        break;\n\n      case \".\":\n        // setting up the currentCalculation so that two dots can not be in a row. \n        if (!dotOperator) {\n          setCurrentCalculation(currentCalculation + innerText);\n          setDotOperator(true);\n        }\n        setOperator(true);\n        setNullOperator(false);\n        break;\n\n      case '/':\n      case '+':\n      case '-':\n      case '*':\n        // setting up the currentCalculation so that two operators can not be in a row. \n        if (!operator) {\n          setCurrentCalculation(currentCalculation + innerText);\n          setOperator(true);\n        }\n        setDotOperator(true);\n        setNullOperator(false);\n        break;\n\n      case \"=\":\n        // if the last pressed button is either operator or dot, it will be ignored in evaluation. \n        setCurrentCalculation(eval(currentCalculation.match(/[+/*]?-?\\d+\\.?\\d*/g).join('')));\n        setDotOperator(false);\n        setOperator(false);\n        \n    }\n  }\n\n  return (\n    <div>\n      <Header />\n      <div className=\"calculator\">\n        <div id=\"display\" className=\"display\">{currentCalculation}</div>\n        <div className=\"number-container\">\n          {numbers.map((number, index) => {\n            return (\n              <button\n                className=\n                {\n                  `${number === \"0\" && \"null\"}`\n                }\n                onClick={handleClick} key={index}>{number}</button>\n            );\n          })}\n        </div>\n\n        <div className=\"operator-container\">\n          {arithmeticOperations.map((operator, index) => {\n            return (\n              <button\n                className={\n                  `${operator === \"=\" && \"eval\"} \n                   ${operator === \".\" && \"dot\"}\n                   ${operator === \"+\" && \"addition\"}\n                   ${operator === \"AC\" && \"ac\"}\n                   ${operator === \"/\" && \"divide\"}\n                   ${operator === \"*\" && \"multiply\"}\n                   ${operator === \"-\" && \"substraction\"}\n                   `\n                }\n                onClick={handleClick} key={index}>{operator}</button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}